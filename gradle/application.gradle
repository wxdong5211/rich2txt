apply plugin:'application'

applicationDefaultJvmArgs = [

        //common
//        "-server",
//        "-Xms128m",
//        "-Xmx512m",
//        "-Xss256k",
//        "-Xmn192mk",//3/8heap
//        "-XX:NewRatio=8",//3/8heap
//        "-XX:SurvivorRatio=6",//1:1:X=xmn
//        "-XX:PermSize=32m",
//        "-XX:MaxPermSize=32m",

        //gc
//        "-XX:+UseG1GC",

//        "-XX:+UseConcMarkSweepGC",
//        "-XX:+UseParNewGC",
//        "-XX:+CMSParallelRemarkEnabled",
//        "-XX:+CMSPermGenSweepingEnabled",
//        "-XX:+CMSClassUnloadingEnabled",
//        "-XX:CMSInitiatingOccupancyFraction=68",//concurrent mode failure set it small
//        "-XX:+UseCMSInitiatingOccupancyOnly",

//        "-XX:MaxTenuringThreshold=14",//<15

        //memory debug
//        "-XX:-HeapDumpOnOutOfMemoryError",
//        "-XX:HeapDumpPath=./java_pid<pid>.hprof",
//        "-XX:OnOutOfMemoryError=\"<cmd args>;<cmd args>\"",
//        "-XX:OnError=\"<cmd args>;<cmd args>\"",

        //gc debug
//        "-XX:+PrintGCDetails",
//        "-XX:+PrintGCTimeStamps",
//        "-XX:+PrintGCDateStamps",
//        "-XX:+PrintTenuringDistribution",
//        "-XX:+PrintGCApplicationStoppedTime",
//        "-XX:+PrintHeapAtGC",

        //gc log
//        "-Xloggc:./gcs/gc.log",
//        "-XX:-UseGCLogFileRotation",
//        "-XX:NumberOfGClogFiles=10",
//        "-XX:GCLogFileSize=8K",//must >= 8k

        //security
//        "-Djava.security.policy=conf/policy.all",

        //monitor
//        "-Dcom.sun.management.jmxremote",
//        "-Dcom.sun.management.jmxremote.port=1099",
//        "-Dcom.sun.management.jmxremote.authenticate=false",
//        "-Dcom.sun.management.jmxremote.ssl=false",

]

jar {
    exclude "**/*.xml","**/*.properties"
}

startScripts{
    classpath += files('conf')
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile    = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\conf', '%APP_HOME%\\conf')
        unixScriptFile.text    = unixScriptFile.text.replace('$APP_HOME/lib/conf', '$APP_HOME/conf')
        if(unixScriptFile.text.indexOf("export APP_HOME")==-1){
            unixScriptFile.text    = unixScriptFile.text.replace('APP_HOME=',  'export APP_HOME=')
        }
    }
}

applicationDistribution.from(sourceSets.main.resources) {
    into "conf"
}